print(i)
url <- sprintf("http://webometrics.info/en/world?page=%s", i)
i
i = 16
print(i)
url <- sprintf("http://webometrics.info/en/world?page=%s", i)
doc = htmlParse(theurl)
name = xpathSApply(doc, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
name
domains = xpathSApply(doc, "//table/tbody/tr/td[2]/a/@href")
domains
df = data.frame(name=name, domain=domains)
u = lapply(1:119, function(i){
print(i)
url <- sprintf("http://webometrics.info/en/world?page=%s", i)
doc = htmlParse(theurl)
name = xpathSApply(doc, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc, "//table/tbody/tr/td[2]/a/@href")
df = data.frame(name=name, domain=domains)
df
})
y = do.call(rbind, u)
save(y, file='~/Desktop/unis.Rsav')
head(y)
source('~/Desktop/scrapeUnis.R')
head(x)
x[x$country == 'EG',]
dim(x)
head(x)
head(y)
dim(y)
y[y$country == 'EG',]
str(y)
y$country = as.character(y$country)
y[y$country == 'EG',]
table(y$country)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
menus
source('~/.active-rstudio-document')
last
as.numeric(NA)
menu = 'aq'
menu = 'aw'
writeLines(sprintf('Processing %s', menu))
url <- sprintf("http://webometrics.info/en/%s", t)
url <- sprintf("http://webometrics.info/en/%s", t)
doc = htmlParse(theurl)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
last = as.numeric(strsplit(last, '=')[[1]][2])
last
if(is.na(last) | is.nan(last) | is.null(last) ) last = 1
writeLines(sprintf('\tNumber of pages = %s', last))
i = 1
writeLines(sprintf('\t%s/%s'), i, last)
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
url2
doc2 = htmlParse(url2)
name = xpathSApply(doc, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc, "//table/tbody/tr/td[2]/a/@href")
country = xpathSApply(doc, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
name
domain
domains
ccode
df = data.frame(name=name, domain=domains, country=ccode)
df
menu
url
i = 0
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
doc2 = htmlParse(url2)
name = xpathSApply(doc, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc, "//table/tbody/tr/td[2]/a/@href")
country = xpathSApply(doc, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
df = data.frame(name=name, domain=domains, country=ccode)
df
writeLines(sprintf('Processing %s', menu))
url <- sprintf("http://webometrics.info/en/%s", t)
doc = htmlParse(url)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
last = as.numeric(strsplit(last, '=')[[1]][2])
if(is.na(last) | is.nan(last) | is.null(last) ) last = 1
writeLines(sprintf('Processing %s', menu))
url <- sprintf("http://webometrics.info/en/%s", t)
doc = htmlParse(url)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
last
last = as.numeric(strsplit(last, '=')[[1]][2])
last
if(is.na(last) | is.nan(last) | is.null(last) ) last = 1
writeLines(sprintf('\tNumber of pages = %s', last))
0:10
i
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
doc2 = htmlParse(url2)
name = xpathSApply(doc, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc, "//table/tbody/tr/td[2]/a/@href")
country = xpathSApply(doc, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
df = data.frame(name=name, domain=domains, country=ccode)
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
doc2 = htmlParse(url2)
name = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/@href")
country = xpathSApply(doc2, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
df = data.frame(name=name, domain=domains, country=ccode)
df
head(df)
menu
url2 = paste0(url, sprintf('?page=%s', i))
url2
http://webometrics.info/en/aw?page=0
doc2 = htmlParse(url2)
doc2
name = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/text()")
name
name = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
name
doc2
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
doc2 = htmlParse(url2)
name = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc2, "//table/tbody/tr/td[2]/a/@href")
country = xpathSApply(doc2, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
name
url2
name = xpathSApply(doc2, "//table/tbody/tr/td[3]/a/text()")
name
name = xpathSApply(doc2, "//table/tbody/tr/td[3]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc2, "//table/tbody/tr/td[3]/a/@href")
country = xpathSApply(doc2, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
df = data.frame(name=name, domain=domains, country=ccode)
head(df)
source('~/.active-rstudio-document')
menu = menus[1]
writeLines(sprintf('Processing %s', menu))
url <- sprintf("http://webometrics.info/en/%s", t)
doc = htmlParse(url)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
last = as.numeric(strsplit(last, '=')[[1]][2])
last
menus = c('North_america', 'Latin_america', 'Europe', 'Asia', 'Africa', 'aw', 'Oceania')
menu = menus[1]
writeLines(sprintf('Processing %s', menu))
url <- sprintf("http://webometrics.info/en/%s", t)
doc = htmlParse(url)
source('~/.active-rstudio-document')
head(y)
head(x)
dim(x)
x[x$country == 'EG']
x[x$country == 'EG',]
dim(x[x$country == 'EG',])
x[x$name == 'University of Cambridge',]
x[x$name == 'University of Cambridge ',]
source('~/Desktop/scrapeUnis.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(x)
x[x$country == 'GB',]
x[x$country == 'UK',]
x[grep('^European', x$name),]
x[grep('European', x$name),]
print(load('~/Desktop/unis.Rsav'))
x[grep('European', x$name),]
x[grep('Bioinformatics', x$name),]
x[x$country == 'EU',]
print(load('~/Desktop/all_res.Rsav'))
x[x$country == 'EU',]
x[x$country == 'INT',]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
menu = 'world'
source('~/.active-rstudio-document')
menus
writeLines(sprintf('Processing %s', menu))
url <- sprintf(base, menu)
doc = htmlParse(url)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
if(length(last) == 0){
last = 0
}else{
last = as.numeric(strsplit(last, '=')[[1]][2])
}
menu
menu = 'world'
writeLines(sprintf('Processing %s', menu))
url <- sprintf(base, menu)
doc = htmlParse(url)
last = xpathSApply(doc, "//a[@title='Go to last page']/@href")
if(length(last) == 0){
last = 0
}else{
last = as.numeric(strsplit(last, '=')[[1]][2])
}
last
i = 0
writeLines(sprintf('\t%s/%s', i, last))
url2 = paste0(url, sprintf('?page=%s', i))
doc2 = htmlParse(url2)
name = xpathSApply(doc2, "//table/tbody/tr/td[3]/a/text()")
name = sapply(name, toString.XMLNode)
domains = xpathSApply(doc2, "//table/tbody/tr/td[3]/a/@href")
country = xpathSApply(doc2, "//img[@alt='bandera']/@src")
ccode = sapply(strsplit(country, '/'), function(z){
toupper(strsplit(z[length(z)], '\\.')[[1]][1])
})
name
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(x)
dim(x)
x[x$country == 'INT',]
source('~/Desktop/scrapeUnis.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
f
source('~/.active-rstudio-document')
f
source('~/.active-rstudio-document')
f
source('~/.active-rstudio-document')
f
source('~/.active-rstudio-document')
f
require(extrafont)
fonts()
require(extrafont)
font_import(paths = '/Users/omarwagih/Library/Fonts/')
fonts()
?gpar
require(grImport)
?gpar
source('~/.active-rstudio-document')
fonts()
source('~/.active-rstudio-document')
fonttable()
tail(fonttable())
source('~/.active-rstudio-document')
loadfonts()
font_import(paths = '/Users/omarwagih/Library/Fonts/')
loadfonts()
?gpar
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Desktop/Untitled.R')
source('~/Desktop/Untitled.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
plot(rs)
plot(cs)
source('~/.active-rstudio-document')
plot(rs)
plot(cs)
plot(apply(x, 2, sum))
plot(apply(x, 1, sum))
source('~/.active-rstudio-document')
rle(1:10)
rle(rs)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rs
source('~/.active-rstudio-document')
rs
source('~/.active-rstudio-document')
rs
dim(x)
source('~/.active-rstudio-document')
rlex
plot(rs)
source('~/.active-rstudio-document')
plot(rs)
rlex
rle(rs)
source('~/.active-rstudio-document')
rlex
plot(rs)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
hist(x)
sum(x != 0)
sum(x > 0 & x < 1)
x[x > 0 & x < 1]
source('~/.active-rstudio-document')
rlex
source('~/.active-rstudio-document')
rlex
source('~/.active-rstudio-document')
top.offset
bottom.offset
480-412
source('~/.active-rstudio-document')
left.offset
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
right.offset
source('~/.active-rstudio-document')
w
W
H
source('~/knitr.R')
source('~/.active-rstudio-document')
x
y
plot(x,y)
source('~/.active-rstudio-document')
plot(x,y)
??betterPairs
smoothScatter( x )
smoothScatter( x,y )
smoothScatter( x,y , cex=2)
smoothScatter( x,y , cex=5)
smoothScatter( x,y , cex=2)
smoothScatter( x,y , cex=2, col=colorRampPalette('red', 'green'))
smoothScatter( x,y , cex=2, col=colorRampPalette('red', 'green',3))
smoothScatter( x,y , cex=2, col='red')
smoothScatter( x,y , cex=2, colramp=colorRampPalette('red', 'green'))
RColorBrewer::brewer.pal(
9,
"YlOrRd" )
RColorBrewer::brewer.pal(
9,
"YlOrRd" )RColorBrewer::brewer.pal(
9,
"YlOrRd" )
RColorBrewer::brewer.pal(
9,
"YlOrRd" )
cols = RColorBrewer::brewer.pal(
9,
"YlOrRd" )
smoothScatter( x,y , cex=2, colramp=colorRampPalette(cols))
source('~/.active-rstudio-document')
x
source('~/Desktop/iaess/www/process_template.R')
x
source('~/.active-rstudio-document')
getwd()
dirname(script.name)
script.name
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/.active-rstudio-document')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
page.name
page.template
gsub('hello world', c('x', 'y'))
gsub('hello world', c('x', 'y'), 'hello world bye')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/.active-rstudio-document')
source('~/Desktop/iaess/www/process_template.R')
main
readLinesString('template/carousel_template.html')
main = gsub('##carousel##', readLinesString('template/carousel_template.html'), main)
main
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
seq_along(pages)
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
source('~/Desktop/iaess/www/process_template.R')
dev.off()
source('~/Desktop/MSc project/rewiring/gmm/rewiring-gmm.R')
ks$AURKB
seqs = list(pos = ks$AURKB, neg = negs$ST)
seqs
saveRDS(seqs, '~/Desktop/aurkb_pos_neg.rds')
source('~/Desktop/mclust_togary.R')
source('~/Desktop/mclust_togary.R')
pwm = readRDS('~/Development/mimp/inst/extdata/mimp_data.rds')$pwms[['AURKB']]
sc = lapply(seqs, function(sq) mss(sq, pwm))
sc$pos
hist(sc$pos)
hist(sc$neg)
mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)
mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[1]
mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[2]
sq = c(sq, list(wt=mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[1], mt=mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[2]))
sc = c(sc, list(wt=mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[1], mt=mss(c('CPGRDRRTEEENLRK', 'CPGRDWRTEEENLRK'), pwm)[2]))
sc$pos
sc$neg
sc$wt
saveRDS(sc, '~/Desktop/aurkb_scores.rds')
source('~/Desktop/mclust_togary.R')
source('~/.active-rstudio-document')
clust$fg.params
source('~/Desktop/mclust_togary.R')
prob
clust$bg.params
pwm
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data$pwms
names(data$pwms)
source('~/Desktop/MSc project/mimp_nseqs.R')
data$nseqs
length(data$nseqs)
source('~/Desktop/MSc project/mimp_nseqs.R')
data$nseqs
data_fam$nseqs
data_newman$nseqs
source('~/Desktop/MSc project/mimp_nseqs.R')
data = readRDS(f)
data$nseqs
require(rmimp)
?mimp
# Get the path to example mutation data
mut.file = system.file("extdata", "mutation_data.txt", package = "rmimp")
# Get the path to example FASTA sequence data
seq.file = system.file("extdata", "sequence_data.txt", package = "rmimp")
# View the files in a text editor
browseURL(mut.file)
browseURL(seq.file)
# Run rewiring analysis
results = mimp(mut.file, seq.file, display.results=TRUE)
source('~/Development/mimp/R/Rmimp.R')
# Get the path to example mutation data
mut.file = system.file("extdata", "mutation_data.txt", package = "rmimp")
# Get the path to example FASTA sequence data
seq.file = system.file("extdata", "sequence_data.txt", package = "rmimp")
# View the files in a text editor
browseURL(mut.file)
browseURL(seq.file)
# Run rewiring analysis
results = mimp(mut.file, seq.file, display.results=TRUE)
results
source('~/Development/mimp/R/Rmimp.R')
results = mimp(mut.file, seq.file, display.results=TRUE)
results
source('~/Development/mimp/R/Rmimp.R')
results = mimp(mut.file, seq.file, display.results=TRUE)
source('~/Development/mimp/build/build_mimp_pkg.R')
